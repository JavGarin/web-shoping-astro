---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { Product } from '../../types';

export async function getStaticPaths() {
  const { data, error } = await supabase.from('products').select('id');
  if (error) {
    throw new Error(`Error fetching product IDs: ${error.message}`);
  }
  return data.map(({ id }) => ({
    params: { id: id.toString() },
  }));
}

const { id } = Astro.params;

const { data: product, error } = await supabase
  .from('products')
  .select('*')
  .eq('id', id)
  .single();

if (error || !product) {
  return Astro.redirect('/404');
}
---

<Layout title={product.name}>
  <section class="py-12 md:py-16">
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12 items-start">
        
        <!-- Columna de la Imagen -->
        <div class="anim-fade-in-up lg:col-span-2">
          <div id="product-image-container" class="w-full rounded-lg bg-cream-beige/10 shadow-lg border border-earth-brown/20 flex items-center justify-center p-4 cursor-pointer">
            <img 
              src={product.imageUrl} 
              alt={`Image of ${product.name}`}
              class="w-full h-full object-center object-contain"
            />
          </div>
        </div>

        <!-- Columna de Detalles -->
        <div class="anim-fade-in-up lg:sticky lg:top-32 lg:col-span-1" style="animation-delay: 0.1s;">
          <h1 class="text-3xl lg:text-4xl font-bold tracking-tight text-charcoal-gray">{product.name}</h1>
          
          <div class="mt-4">
            <p class="text-3xl text-forest-green font-semibold">${product.price}</p>
          </div>

          <div class="mt-6 border-t border-earth-brown/20 pt-6">
            <h3 class="text-xl font-semibold text-charcoal-gray mb-2">Descripción</h3>
            <div class="space-y-4 text-base text-charcoal-gray/90 leading-relaxed">
              <p>{product.description}</p>
            </div>
          </div>

          <div class="mt-8">
            <!-- Selector de Cantidad -->
            <div class="flex items-center mb-6">
              <h3 class="text-sm text-charcoal-gray font-medium mr-6">Cantidad</h3>
              <div class="flex items-center rounded-md border border-earth-brown/30">
                <button id="qty-minus" type="button" class="px-3 py-2 text-charcoal-gray transition hover:bg-earth-brown/10 rounded-l-md">-</button>
                <input id="quantity" type="text" value="1" readonly class="w-12 text-center border-x border-earth-brown/30 bg-transparent focus:outline-none">
                <button id="qty-plus" type="button" class="px-3 py-2 text-charcoal-gray transition hover:bg-earth-brown/10 rounded-r-md">+</button>
              </div>
            </div>

            <!-- Botón de Añadir al Carrito -->
            <button
              type="button"
              id="add-to-cart-btn"
              class="w-full flex items-center justify-center gap-3 rounded-lg bg-forest-green px-6 py-4 text-lg font-medium text-cream-beige shadow-lg hover:bg-earth-brown transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-forest-green focus:ring-offset-2"
              data-product={JSON.stringify(product)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
              Añadir al Carrito
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Modal para Zoom de Imagen -->
  <div id="zoom-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/70 p-4">
    <div class="relative max-w-4xl max-h-full">
      <img id="zoomed-image" src="" alt="Zoomed product image" class="w-auto h-auto max-w-full max-h-[90vh] object-contain">
      <button id="close-modal-btn" class="absolute top-0 right-0 -mt-4 -mr-4 bg-white rounded-full p-2 text-gray-800 hover:bg-gray-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
      </button>
    </div>
  </div>
</Layout>

<script>
  import { addToCart } from '../../lib/cart';

  function setupProductPage() {
    const productData = (document.getElementById('add-to-cart-btn') as HTMLElement)?.dataset.product;
    if (!productData) return;

    const product = JSON.parse(productData);
    const quantityInput = document.getElementById('quantity') as HTMLInputElement;
    const minusBtn = document.getElementById('qty-minus');
    const plusBtn = document.getElementById('qty-plus');
    const addToCartBtn = document.getElementById('add-to-cart-btn');

    if (!quantityInput || !minusBtn || !plusBtn || !addToCartBtn) return;

    // Listeners para el selector de cantidad
    minusBtn.addEventListener('click', () => {
      let quantity = parseInt(quantityInput.value);
      if (quantity > 1) {
        quantity--;
        quantityInput.value = quantity.toString();
      }
    });

    plusBtn.addEventListener('click', () => {
      let quantity = parseInt(quantityInput.value);
      quantity++;
      quantityInput.value = quantity.toString();
    });

    // Listener para añadir al carrito
    if (!addToCartBtn.dataset.listenerAttached) {
      addToCartBtn.addEventListener('click', () => {
        const quantity = parseInt(quantityInput.value);
        addToCart(product, quantity);
      });
      addToCartBtn.dataset.listenerAttached = 'true';
    }

    // Lógica para el Modal de Zoom
    const imageContainer = document.getElementById('product-image-container');
    const modal = document.getElementById('zoom-modal');
    const zoomedImage = document.getElementById('zoomed-image') as HTMLImageElement;
    const closeModalBtn = document.getElementById('close-modal-btn');

    if (imageContainer && modal && zoomedImage && closeModalBtn) {
      imageContainer.addEventListener('click', () => {
        zoomedImage.src = product.imageUrl;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
      });

      const closeModal = () => {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      };

      closeModalBtn.addEventListener('click', closeModal);
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    }
  }

  document.addEventListener('astro:page-load', setupProductPage);
</script>
